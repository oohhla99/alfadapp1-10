/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Swap0x, Swap0xInterface } from "../../contracts/Swap0x";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sellToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "buyToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "sellAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "allowanceTarget",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "swapTarget",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "swapData",
        type: "bytes",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506112e0806100206000396000f3fe6080604052600436106100295760003560e01c8063ac9650d81461002e578063e962172a1461006b575b600080fd5b34801561003a57600080fd5b50610055600480360381019061005091906108e0565b610087565b6040516100629190610a7f565b60405180910390f35b61008560048036038101906100809190610bc9565b610193565b005b60608282905067ffffffffffffffff8111156100a6576100a5610c78565b5b6040519080825280602002602001820160405280156100d957816020015b60608152602001906001900390816100c45790505b50905060005b8383905081101561018c5761015b3085858481811061010157610100610ca7565b5b90506020028101906101139190610ce5565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610678565b82828151811061016e5761016d610ca7565b5b6020026020010181905250808061018490610d77565b9150506100df565b5092915050565b8673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b81526004016101d093929190610ddd565b6020604051808303816000875af11580156101ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102139190610e4c565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610326578673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016102a3929190610e79565b6020604051808303816000875af11580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e69190610e4c565b610325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031c90610eff565b60405180910390fd5b5b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146103f0578673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103a89190610f1f565b602060405180830381865afa1580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e99190610f4f565b90506103f4565b4790505b6000808573ffffffffffffffffffffffffffffffffffffffff1634868660405161041f929190610fbb565b60006040518083038185875af1925050503d806000811461045c576040519150601f19603f3d011682016040523d82523d6000602084013e610461565b606091505b509150915081610470826106a5565b906104b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a89190611018565b60405180910390fd5b5073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161461060d5760008973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105349190610f1f565b602060405180830381865afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105759190610f4f565b905060008482610585919061103a565b90508a73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016105c2929190610e79565b6020604051808303816000875af11580156105e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106059190610e4c565b50505061066c565b600047905060008482610620919061103a565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610668573d6000803e3d6000fd5b5050505b50505050505050505050565b606061069d838360405180606001604052806027815260200161128460279139610710565b905092915050565b60606044825110156106ee576040518060400160405280601d81526020017f5472616e73616374696f6e2072657665727465642073696c656e746c79000000815250905061070b565b600482019150818060200190518101906107089190611160565b90505b919050565b606061071b846107dd565b61075a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107519061121b565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1685604051610782919061126c565b600060405180830381855af49150503d80600081146107bd576040519150601f19603f3d011682016040523d82523d6000602084013e6107c2565b606091505b50915091506107d2828286610800565b925050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561081057829050610860565b6000835111156108235782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108579190611018565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126108a05761089f61087b565b5b8235905067ffffffffffffffff8111156108bd576108bc610880565b5b6020830191508360208202830111156108d9576108d8610885565b5b9250929050565b600080602083850312156108f7576108f6610871565b5b600083013567ffffffffffffffff81111561091557610914610876565b5b6109218582860161088a565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610993578082015181840152602081019050610978565b60008484015250505050565b6000601f19601f8301169050919050565b60006109bb82610959565b6109c58185610964565b93506109d5818560208601610975565b6109de8161099f565b840191505092915050565b60006109f583836109b0565b905092915050565b6000602082019050919050565b6000610a158261092d565b610a1f8185610938565b935083602082028501610a3185610949565b8060005b85811015610a6d5784840389528151610a4e85826109e9565b9450610a59836109fd565b925060208a01995050600181019050610a35565b50829750879550505050505092915050565b60006020820190508181036000830152610a998184610a0a565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610acc82610aa1565b9050919050565b610adc81610ac1565b8114610ae757600080fd5b50565b600081359050610af981610ad3565b92915050565b6000819050919050565b610b1281610aff565b8114610b1d57600080fd5b50565b600081359050610b2f81610b09565b92915050565b6000610b4082610aa1565b9050919050565b610b5081610b35565b8114610b5b57600080fd5b50565b600081359050610b6d81610b47565b92915050565b60008083601f840112610b8957610b8861087b565b5b8235905067ffffffffffffffff811115610ba657610ba5610880565b5b602083019150836001820283011115610bc257610bc1610885565b5b9250929050565b600080600080600080600060c0888a031215610be857610be7610871565b5b6000610bf68a828b01610aea565b9750506020610c078a828b01610aea565b9650506040610c188a828b01610b20565b9550506060610c298a828b01610aea565b9450506080610c3a8a828b01610b5e565b93505060a088013567ffffffffffffffff811115610c5b57610c5a610876565b5b610c678a828b01610b73565b925092505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610d0257610d01610cd6565b5b80840192508235915067ffffffffffffffff821115610d2457610d23610cdb565b5b602083019250600182023603831315610d4057610d3f610ce0565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d8282610aff565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610db457610db3610d48565b5b600182019050919050565b610dc881610ac1565b82525050565b610dd781610aff565b82525050565b6000606082019050610df26000830186610dbf565b610dff6020830185610dbf565b610e0c6040830184610dce565b949350505050565b60008115159050919050565b610e2981610e14565b8114610e3457600080fd5b50565b600081519050610e4681610e20565b92915050565b600060208284031215610e6257610e61610871565b5b6000610e7084828501610e37565b91505092915050565b6000604082019050610e8e6000830185610dbf565b610e9b6020830184610dce565b9392505050565b600082825260208201905092915050565b7f5377617030783a20616c6c6f77616e6365206661696c65640000000000000000600082015250565b6000610ee9601883610ea2565b9150610ef482610eb3565b602082019050919050565b60006020820190508181036000830152610f1881610edc565b9050919050565b6000602082019050610f346000830184610dbf565b92915050565b600081519050610f4981610b09565b92915050565b600060208284031215610f6557610f64610871565b5b6000610f7384828501610f3a565b91505092915050565b600081905092915050565b82818337600083830152505050565b6000610fa28385610f7c565b9350610faf838584610f87565b82840190509392505050565b6000610fc8828486610f96565b91508190509392505050565b600081519050919050565b6000610fea82610fd4565b610ff48185610ea2565b9350611004818560208601610975565b61100d8161099f565b840191505092915050565b600060208201905081810360008301526110328184610fdf565b905092915050565b600061104582610aff565b915061105083610aff565b925082820390508181111561106857611067610d48565b5b92915050565b600080fd5b61107c8261099f565b810181811067ffffffffffffffff8211171561109b5761109a610c78565b5b80604052505050565b60006110ae610867565b90506110ba8282611073565b919050565b600067ffffffffffffffff8211156110da576110d9610c78565b5b6110e38261099f565b9050602081019050919050565b60006111036110fe846110bf565b6110a4565b90508281526020810184848401111561111f5761111e61106e565b5b61112a848285610975565b509392505050565b600082601f8301126111475761114661087b565b5b81516111578482602086016110f0565b91505092915050565b60006020828403121561117657611175610871565b5b600082015167ffffffffffffffff81111561119457611193610876565b5b6111a084828501611132565b91505092915050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000611205602683610ea2565b9150611210826111a9565b604082019050919050565b60006020820190508181036000830152611234816111f8565b9050919050565b600061124682610959565b6112508185610f7c565b9350611260818560208601610975565b80840191505092915050565b6000611278828461123b565b91508190509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122000bc03b55a47528e043f260b2451241ddece2ea4a91355099a08c0a8a33ef65c64736f6c63430008110033";

type Swap0xConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Swap0xConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Swap0x__factory extends ContractFactory {
  constructor(...args: Swap0xConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Swap0x> {
    return super.deploy(overrides || {}) as Promise<Swap0x>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Swap0x {
    return super.attach(address) as Swap0x;
  }
  override connect(signer: Signer): Swap0x__factory {
    return super.connect(signer) as Swap0x__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Swap0xInterface {
    return new utils.Interface(_abi) as Swap0xInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Swap0x {
    return new Contract(address, _abi, signerOrProvider) as Swap0x;
  }
}
